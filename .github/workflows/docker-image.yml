name: Build and Test TTS System

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [gateway, kokkoro, chatterbox]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service == 'gateway' && 'gateway' || format('models/{0}', matrix.service) }}
        file: ./${{ matrix.service == 'gateway' && 'gateway' || format('models/{0}', matrix.service) }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create .env file
      run: |
        cp .env.example .env
        echo "KOKKORO_ENDPOINT=http://kokkoro:8001" >> .env
        echo "CHATTERBOX_ENDPOINT=http://chatterbox:8002" >> .env

    - name: Build and start services
      run: |
        docker-compose up --build -d

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to start..."
        sleep 30
        
        # Wait for gateway to be healthy
        for i in {1..30}; do
          if curl -f http://localhost:8000/health/quick; then
            echo "Gateway is ready!"
            break
          fi
          echo "Waiting for gateway... ($i/30)"
          sleep 5
        done

    - name: Run health checks
      run: |
        # Test gateway health
        curl -f http://localhost:8000/health
        
        # Test models availability
        curl -f http://localhost:8000/models

    - name: Run TTS tests
      run: |
        # Test Kokkoro
        curl -X POST "http://localhost:8000/tts/kokkoro" \
          -H "Content-Type: application/json" \
          -d '{"text": "Hello world", "voice_id": "default"}' \
          -f
        
        # Test Chatterbox
        curl -X POST "http://localhost:8000/tts/chatterbox" \
          -H "Content-Type: application/json" \
          -d '{"text": "Hello world", "voice_id": "default"}' \
          -f

    - name: Show service logs on failure
      if: failure()
      run: |
        echo "=== Gateway Logs ==="
        docker-compose logs gateway
        echo "=== Kokkoro Logs ==="
        docker-compose logs kokkoro
        echo "=== Chatterbox Logs ==="
        docker-compose logs chatterbox

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
